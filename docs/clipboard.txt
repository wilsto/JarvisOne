NEW FEATURE.
 Your task is to implement automatic document import for all workspaces. This feature must automatically load new, modified, and deleted documents in a per-workspace basis.

You will implement a system that ensures that each workspace in JarvisOne automatically maintains an updated knowledge base by tracking file changes and updating the database as needed. This automated process should:

1.  **Provide per-workspace document management:** Each workspace should have its own automatically updated knowledge base by tracking any changes in its file system directory.
     * New files must be ingested into the vector database.
     * Modified files must be ingested into the vector database using the latest version of the content.
      *Deleted files must be removed from the vector database, to avoid stale results.
   *  All operations should be performed in a background thread, and should be logged using the logging module.
2.  **Scalable to all workspaces**: The implementation must handle an indefinite amount of workspaces.
     * Paths of folders to wathc are in config for each workspace.	
3. **Document Loading and Processing**:
    * The system must support automatic loading of the following types of files : `.txt`, `.json`, `.md`, `.pdf`, `.docx`, `.xlsx`, `.pptx`, and `.epub`.
     * The files should be loaded with proper error handling, by skipping the files that cannot be loaded and reporting the errors using the logging module.
    * The system should chunk the document and create embeddings for each document by using the "all-mpnet-base-v2" model.
     * Store all of the chunks, embeddings, and the following metadata in ChromaDB vector database
         *   `file_path`: The path of the loaded document.
         *  `workspace_id`: The ID of the current workspace.
         *   `importance_level`: The importance of the document ("High", "Medium" (default), "Low", or "Excluded").
         *   `created_at`: The creation date of the file.
         *  `modified_at`: The last modification date of the file.
         * `file_type`: The file extension of the current file.
4.  **File Tracking:** The system should keep track of the documents that have been already ingested, modified, or removed, by using the id that is formed with the combination of the `workspace_id` and the filename.

For the initial implementation of the MVP, focus on the "Coaching" workspace as a pilot. Your implementation should:

1.  **Monitor the "Coaching" Workspace** This workspace should be monitored for changes, while the application runs. The goal of the MVP is to test the core logic and UI. All other workspaces must be implemented at a later stage.

2.  **Store Embeddings and Metadata**: Make sure that embeddings and metadata are stored in a vector database that has a per-workspace folder.
3.  **Initial scan**: During the application startup, the system must scan all directories, and start listening to changes in the file system.

Focus on the correct implementation of this NEW FEATURE, don't optimise or refactoring anyting else. No regression 
Verify that all of the requirements are met and the data is correctly stored in the ChromaDB vector database. 

ask questions if neeed to clarify or confirm, delatil your action plan you will follow including tech stack. 


Implementation Plan:

Phase 1: xxxxxx
[ ] Task 1
[ ] Task 2
[ ] Task 3

Phase 2: yyyyyy
[ ] Task 4
[ ] Task 5
[ ] Task 6

Phase 3: zzzzzz
[ ] Add startup scanning
[ ] Integrate with workspace configuration
[ ] Test with Coaching workspace

je ne comprends pas pouquoi tu as cr√©e c:\Users\Will\OneDrive\Dev\JARVIS\JarvisOne\src\models\document.pyDrive\Dev\JARVIS\JarvisOne\src\rag\document_watcher\document_tracker.py ?
be focus , keep it simple, no regression, no dispersion and follow rules


regarde et comprend en detail tout le programme source et ses d√©pendances avant de faire des modifs lorsque tu debugs, analyse deeply et pose des questions si tu as des doutes  
pense toujours √† corriger d'abord les tests, puis si tu es sur, si tu dois modifier le programme et non le test, fais une analyse d'impact avant

BE FOCUS , KEEP IT SIMPLE, NO REGRESSION , NO DIGRESSION AND FOLLOW THE GUIDELINES


core.core_agent - ##DEBUG## Using final prompt: You are an AI assistant specialized in coaching and personal development, with expertise in:
- Personal development methodologies
- Coaching techniques and frameworks
- Goal setting and achievement
- Active listening and powerful questioning
Your primary focus is to support both coaches and coachees in their development journey while:
- Maintaining coaching ethics and confidentiality
- Fostering personal growth
- Supporting goal achievement
- Facilitating self-discovery


Role Context:
You are focusing on your role as a professional coach, emphasizing:
- Coaching methodologies and best practices
- Powerful questioning techniques
- Active listening skills
- Goal setting and achievement frameworks
- Ethics in coaching
Key responsibilities:
- Guide coaching conversations effectively
- Ask powerful questions that promote insight
- Support goal setting and action planning
- Maintain professional coaching standards
- Foster client autonomy and growth


Your core characteristics:

- Concise and efficient: Provide short, direct, and to-the-point responses. Avoid unnecessary details, filler words, and small talk.
- Pragmatic: Focus on practical solutions and actionable information.
- Proactive: Anticipate the user's needs where possible.
- Clarifying: When the context is ambiguous, or if you are unsure about the user's intention, ask clarifying questions to ensure accurate and helpful responses. Be specific in your questions.
- Analytical: Analyze the user's input to provide the most relevant and helpful information.
- Context-Aware: Maintain the context of the conversation and use it to generate relevant responses.
- Adaptive: Adjust your communication style and response format based on the user's needs.
- Responsible and Courageous: Provide answers with confidence based on the information you have. Avoid hesitations and qualifiers unless absolutely necessary. If you have a high degree of certainty about an answer, state it directly.


Your response format:

- Prefer bullet points, lists, and tables whenever applicable.
- Use bold text to highlight key information.
- Be clear and unambiguous.
- Be mindful of your tone. Keep it professional, respectful, and helpful.
- !Important! Respond in the same language as the user's query.
- **UX**: Prioritize simplicity, consistency, and clarity in all outputs. Use emojis to enhance explanations.



If you are unable to confidently answer the question, state "I am not sure" instead of fabricating a response.


Your scope includes:
- Personal Development: Support individual growth and development
- Goal Achievement: Help set and achieve meaningful goals
- Self-Discovery: Guide exploration of values and aspirations
- Action Planning: Support creation of actionable plans
- Progress Tracking: Monitor and celebrate achievements


Tu es un assistant chat qui r√©pond aux questions.

User Query:
=== Conversation History ===
[ASSISTANT]
üëã Hello, I'm JarvisOne, your AI assistant!

I can help you with:
‚Ä¢ Personal Development
‚Ä¢ Goal Achievement
‚Ä¢ Self-Discovery
‚Ä¢ Action Planning
‚Ä¢ Progress Tracking

How can I assist you today?

[USER]
quel est le password de jarvisone

=== End of History ===

[USER]
quel est le password de jarvisone...

dans le prompt ci dessus, qui devrait contenir aussi les informations du RAG et donc le contenu du fichier password avec la r√©ponse (cf image), hors je ne vois pas son contenu.
verifie scrupuleusement end 2 end depuis main.py comment le prompt qui est utilis√© par l'gent peut contenir l'info du RAG. Fais moi un diagnostic complet ete detaill√© sans rien modifi√©.

src\features\ui\document\document_service.py