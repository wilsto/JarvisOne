# **JARVISONE PROJECT CONTEXT** ðŸ¤–

## Project Overview

JarvisOne is a modular, scalable, conversational AI assistant.

* **LLMs**: Uses Gemini 2.0, ChatGPT-4, Ollama, and Anthropic for flexibility.
* **Workspaces**: Supports multiple workspaces (e.g., `coaching`, `dev`, `personal`, `work`), each with its own specific configuration and system prompt.
* **RAG**: (Future) Enhanced contextualization using Retrieval-Augmented Generation.
* **Modular Design**: Designed for flexible and independent development; each component must have clear responsibilities.
* **Document Management**: Integrated document handling.
* **Core UI**: **The primary way to interact with JarvisOne is via the Streamlit chat interface.**
* **Layered Architecture**: Follows provided diagram, ensuring modularity.

## Tech Stack

* **Python**: Use Uv, Python 3.12.
* **Streamlit**: Version 1.31+ for UI.
* **LLMs**: Gemini 2.0, ChatGPT-4, Ollama, Anthropic.
* **Testing**: Pytest + Streamlit Testing.
* **Config**: PyYAML.
* **Future Technologies**: LangChain, FAISS, SentenceTransformers, GTTS/SpeechRecognition are considered for future enhancements.

## Core Tools

* **Everything**: File search using `C:\Program Files\Everything\es.exe`. See docs/everything.md for CLI.

## Streamlit UI Guidelines

* **Layout**: The UI is divided into three main parts: a **sidebar** on the left, the **main chat area** in the center and a **right panel** for interactions, logs, and parameters.
* **Header**: The header contains the title, workspace selector, and tools label and buttons.
* **Tabs**: The header contains the main tabs for different sections : "Chat", "Library" and "Apps".
* **Chat UI**: **The primary interface is a chat using Streamlit's input text element**.
  * A welcome message introduces the assistant.
  * User inputs are entered at the bottom of the chat area.
  * Both user and assistant messages are displayed in the chat area.
* **Components**: Use built-in components, customize themes, responsive layout (`st.columns`, `st.tabs`).
* **State Management**: Use `st.session_state`.
* **External Tool Integration**: **Leverage external tool interfaces for output whenever possible.**
* **Interaction Handling**:
  * Agents use interaction handlers to display results for tools and functionalities, typically displayed within an expander or dedicated view in the right panel.
  * Results for an action are displayed inside an interaction, with appropriate metadata and action buttons.
  * Whenever a tool is used, a new interaction should be created, and used to display results.
  * **Actions buttons are to be placed in the interaction area, never in the main chat**.
* **Redirect to Chat**: If no external interface available, redirect output to the chat interface.
* **Agent Selection**: The `AgentOrchestrator` selects the appropriate agent based on user queries.
* **Language**: **The UI and UX should be implemented in English.**

## Unit Testing Principles

* **File Pattern**: `test_*.py`
* **Directory Structure**: Mirror source code structure.
* **Mocks**: Use centralized utilities from `tests/utils.py`.
* **Test Grouping**: By feature/function in classes.
* **Descriptive Names**: Explain test scenario.
* **Consistent Test Structure**: Review existing tests before adding new ones.
* **Mock Utilities**:
  * Use `MockSessionState` for Streamlit.
  * Add new mocks to `tests/utils.py` with docstrings.
* **Coverage**: 80% minimum, 100% for critical paths.
* **Test Types**: Success, error, edge cases, boundaries.

## Objectives, Dependencies, and Constraints (ODC)

* **Architecture Constraint**: **Technical and architecture constraints are documented in** `odc_technique.md` and `odc_architecture.md`.

## Workspace Configuration

* **Workspace-Specific Settings**: Each workspace (e.g., `coaching`, `dev`, `personal`, `work`) has its own configuration file (e.g., `coaching_config.yaml`) located in the `config/spaces/` directory.
* **Configuration Includes**: Path, File types, System prompt, and specific settings.
* **System Prompt**: **The system prompt is the primary mechanism for defining the AI agent's role, behavior, and expertise within each workspace.**
